/**
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* A refund record.  A refund is always associated with a single transaction, while a transaction can potentially have several refunds.
*/
export class Refund {
    /**
    * The type of this resource. Is always `refund`.
    */
    'type'?: Refund.TypeEnum;
    /**
    * The unique ID of the refund.
    */
    'id'?: string;
    /**
    * The ID of the transaction associated with this refund.
    */
    'transactionId'?: string;
    /**
    * The payment service\'s unique ID for the refund.
    */
    'paymentServiceRefundId'?: string;
    /**
    * The status of the refund. It may change over time as asynchronous processing events occur.  - `processing` - The refund is being processed. - `succeeded` - The refund was successful. - `declined` - The refund was declined by the underlying PSP. - `failed` - The refund could not proceed due to a technical issue.
    */
    'status'?: Refund.StatusEnum;
    /**
    * The currency code for this refund. Will always match that of the associated transaction.
    */
    'currency'?: string;
    /**
    * The amount requested for this refund.
    */
    'amount'?: number;
    /**
    * The reason for this refund. Could be a multiline string.
    */
    'reason'?: string | null;
    /**
    * The date and time when this refund was created.
    */
    'createdAt'?: Date;
    /**
    * The date and time when this refund was last updated.
    */
    'updatedAt'?: Date;
    /**
    * The type of the instrument that was refunded.
    */
    'targetType'?: Refund.TargetTypeEnum;
    /**
    * The optional ID of the instrument that was refunded. This may be `null` if the instrument was not stored.
    */
    'targetId'?: string | null;
    /**
    * An external identifier that can be used to match the refund against your own records.
    */
    'externalIdentifier'?: string | null;
    /**
    * The base62 encoded refund ID. This represents a shorter version of this refund\'s `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service\'s refund against our system.
    */
    'reconciliationId'?: string;
    /**
    * The external identifier of the related transaction.
    */
    'transactionExternalIdentifier'?: string | null;
    /**
    * The base62 encoded transaction ID. This represents a shorter version of the related transaction\'s `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service\'s transaction against our system.
    */
    'transactionReconciliationId'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "Refund.TypeEnum"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "transactionId",
            "baseName": "transaction_id",
            "type": "string"
        },
        {
            "name": "paymentServiceRefundId",
            "baseName": "payment_service_refund_id",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "Refund.StatusEnum"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "Date"
        },
        {
            "name": "targetType",
            "baseName": "target_type",
            "type": "Refund.TargetTypeEnum"
        },
        {
            "name": "targetId",
            "baseName": "target_id",
            "type": "string"
        },
        {
            "name": "externalIdentifier",
            "baseName": "external_identifier",
            "type": "string"
        },
        {
            "name": "reconciliationId",
            "baseName": "reconciliation_id",
            "type": "string"
        },
        {
            "name": "transactionExternalIdentifier",
            "baseName": "transaction_external_identifier",
            "type": "string"
        },
        {
            "name": "transactionReconciliationId",
            "baseName": "transaction_reconciliation_id",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Refund.attributeTypeMap;
    }
}

export namespace Refund {
    export enum TypeEnum {
        Refund = <any> 'refund'
    }
    export enum StatusEnum {
        Processing = <any> 'processing',
        Succeeded = <any> 'succeeded',
        Declined = <any> 'declined',
        Failed = <any> 'failed'
    }
    export enum TargetTypeEnum {
        PaymentMethod = <any> 'payment-method',
        GiftCardRedemption = <any> 'gift-card-redemption'
    }
}
