/**
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* A mini format version of a payment method.
*/
export class PaymentMethodTokenized {
    /**
    * `payment-method`.
    */
    'type'?: PaymentMethodTokenized.TypeEnum;
    /**
    * The unique ID of the payment method.
    */
    'id'?: string;
    /**
    * The unique ID for a merchant account.
    */
    'merchantAccountId'?: string;
    /**
    * The type of this payment method.
    */
    'method'?: PaymentMethodTokenized.MethodEnum;
    /**
    * A label for the payment method. For a `card` payment method this is the last 4 digits on the card. For others it would be the email address.
    */
    'label'?: string;
    /**
    * The type of the card, if the payment method is a card.
    */
    'scheme'?: PaymentMethodTokenized.SchemeEnum;
    /**
    * The expiration date for the payment method.
    */
    'expirationDate'?: string | null;
    /**
    * The browser target that an approval URL must be opened in. If `any` or `null`, then there is no specific requirement.
    */
    'approvalTarget'?: PaymentMethodTokenized.ApprovalTargetEnum;
    /**
    * The optional URL that the buyer needs to be redirected to to further authorize their payment.
    */
    'approvalUrl'?: string | null;
    /**
    * The ISO-4217 currency code that this payment method can be used for. If this value is `null` the payment method may be used for multiple currencies.
    */
    'currency'?: string | null;
    /**
    * The 2-letter ISO code of the country this payment method can be used for. If this value is `null` the payment method may be used in multiple countries.
    */
    'country'?: string | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "PaymentMethodTokenized.TypeEnum"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "merchantAccountId",
            "baseName": "merchant_account_id",
            "type": "string"
        },
        {
            "name": "method",
            "baseName": "method",
            "type": "PaymentMethodTokenized.MethodEnum"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        },
        {
            "name": "scheme",
            "baseName": "scheme",
            "type": "PaymentMethodTokenized.SchemeEnum"
        },
        {
            "name": "expirationDate",
            "baseName": "expiration_date",
            "type": "string"
        },
        {
            "name": "approvalTarget",
            "baseName": "approval_target",
            "type": "PaymentMethodTokenized.ApprovalTargetEnum"
        },
        {
            "name": "approvalUrl",
            "baseName": "approval_url",
            "type": "string"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return PaymentMethodTokenized.attributeTypeMap;
    }
}

export namespace PaymentMethodTokenized {
    export enum TypeEnum {
        PaymentMethod = <any> 'payment-method'
    }
    export enum MethodEnum {
        Afterpay = <any> 'afterpay',
        Applepay = <any> 'applepay',
        Banked = <any> 'banked',
        Bitpay = <any> 'bitpay',
        Boleto = <any> 'boleto',
        Card = <any> 'card',
        Clearpay = <any> 'clearpay',
        Dana = <any> 'dana',
        Fortumo = <any> 'fortumo',
        Gcash = <any> 'gcash',
        Gocardless = <any> 'gocardless',
        Googlepay = <any> 'googlepay',
        Grabpay = <any> 'grabpay',
        Klarna = <any> 'klarna',
        Ovo = <any> 'ovo',
        Paymaya = <any> 'paymaya',
        Paypal = <any> 'paypal',
        Pix = <any> 'pix',
        Rabbitlinepay = <any> 'rabbitlinepay',
        Scalapay = <any> 'scalapay',
        Shopeepay = <any> 'shopeepay',
        Stripedd = <any> 'stripedd',
        Truemoney = <any> 'truemoney',
        Trustly = <any> 'trustly',
        Zippay = <any> 'zippay'
    }
    export enum SchemeEnum {
        Amex = <any> 'amex',
        Dankort = <any> 'dankort',
        DinersClub = <any> 'diners-club',
        Discover = <any> 'discover',
        EftposAustralia = <any> 'eftpos-australia',
        Elo = <any> 'elo',
        Jcb = <any> 'jcb',
        Maestro = <any> 'maestro',
        Mastercard = <any> 'mastercard',
        Other = <any> 'other',
        Rupay = <any> 'rupay',
        Unionpay = <any> 'unionpay',
        Visa = <any> 'visa'
    }
    export enum ApprovalTargetEnum {
        Any = <any> 'any',
        NewWindow = <any> 'new_window'
    }
}
