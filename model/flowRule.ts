/**
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { FlowAmountCondition } from './flowAmountCondition';
import { FlowAmountRangeCondition } from './flowAmountRangeCondition';
import { FlowAmountZeroCondition } from './flowAmountZeroCondition';
import { FlowAntiFraudDecisionCondition } from './flowAntiFraudDecisionCondition';
import { FlowBINRangeCondition } from './flowBINRangeCondition';
import { FlowBrowserLanguageCondition } from './flowBrowserLanguageCondition';
import { FlowCardCountryCondition } from './flowCardCountryCondition';
import { FlowCardSchemeCondition } from './flowCardSchemeCondition';
import { FlowCardSourceCondition } from './flowCardSourceCondition';
import { FlowCardTypeCondition } from './flowCardTypeCondition';
import { FlowCountryCondition } from './flowCountryCondition';
import { FlowCurrencyCondition } from './flowCurrencyCondition';
import { FlowMetadataCondition } from './flowMetadataCondition';
import { FlowRuleBooleanOutcome } from './flowRuleBooleanOutcome';
import { FlowRuleMethodOutcome } from './flowRuleMethodOutcome';
import { FlowRuleServiceOutcome } from './flowRuleServiceOutcome';

export class FlowRule {
    /**
    * The type of this resource. Is always `rule`.
    */
    'type'?: FlowRule.TypeEnum;
    /**
    * The unique Gr4vy ID for this rule.
    */
    'id'?: string;
    /**
    * The unique ID for a merchant account.
    */
    'merchantAccountId'?: string;
    /**
    * Description of the flow rule.
    */
    'description'?: string | null;
    /**
    * The name of the Flow.
    */
    'flow'?: FlowRule.FlowEnum;
    /**
    * Action for the given rule. Actions can only be used in flows that support them.  * The `checkout` flow only supports the `select-payment-options` action. * The `card-transaction` currently supports the `route-transaction`, `skip-3ds`, and `decline-early` actions. * The `redirect-transaction` flow currently only supports the `route-transaction` action. 
    */
    'action'?: FlowRule.ActionEnum;
    /**
    * One or more conditions that apply for this rule. Each condition needs to match for this rule to go into effect.
    */
    'conditions'?: Array<FlowAmountCondition | FlowAmountRangeCondition | FlowAmountZeroCondition | FlowAntiFraudDecisionCondition | FlowBINRangeCondition | FlowBrowserLanguageCondition | FlowCardCountryCondition | FlowCardSchemeCondition | FlowCardSourceCondition | FlowCardTypeCondition | FlowCountryCondition | FlowCurrencyCondition | FlowMetadataCondition>;
    'outcome'?: FlowRuleServiceOutcome | FlowRuleMethodOutcome | FlowRuleBooleanOutcome;
    /**
    * The position of the rule in the flow.
    */
    'position'?: number;
    /**
    * The date and time when this buyer was created in our system.
    */
    'createdAt'?: Date;
    /**
    * The date and time when this buyer was last updated in our system.
    */
    'updatedAt'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "FlowRule.TypeEnum"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "merchantAccountId",
            "baseName": "merchant_account_id",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "flow",
            "baseName": "flow",
            "type": "FlowRule.FlowEnum"
        },
        {
            "name": "action",
            "baseName": "action",
            "type": "FlowRule.ActionEnum"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<FlowAmountCondition | FlowAmountRangeCondition | FlowAmountZeroCondition | FlowAntiFraudDecisionCondition | FlowBINRangeCondition | FlowBrowserLanguageCondition | FlowCardCountryCondition | FlowCardSchemeCondition | FlowCardSourceCondition | FlowCardTypeCondition | FlowCountryCondition | FlowCurrencyCondition | FlowMetadataCondition>"
        },
        {
            "name": "outcome",
            "baseName": "outcome",
            "type": "FlowRuleServiceOutcome | FlowRuleMethodOutcome | FlowRuleBooleanOutcome"
        },
        {
            "name": "position",
            "baseName": "position",
            "type": "number"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return FlowRule.attributeTypeMap;
    }
}

export namespace FlowRule {
    export enum TypeEnum {
        Rule = <any> 'rule'
    }
    export enum FlowEnum {
        Checkout = <any> 'checkout',
        CardTransaction = <any> 'card-transaction',
        RedirectTransaction = <any> 'redirect-transaction'
    }
    export enum ActionEnum {
        SelectPaymentOptions = <any> 'select-payment-options',
        DeclineEarly = <any> 'decline-early',
        RouteTransaction = <any> 'route-transaction',
        Skip3ds = <any> 'skip-3ds'
    }
}
