/**
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* Each of the separate trip segment, contains detailed itinerary information.
*/
export class AirlineLeg {
    /**
    * 2 character airline code as set by IATA.
    */
    'carrierCode'?: string | null;
    /**
    * Unique identifier of the flight number.
    */
    'flightNumber'?: string | null;
    /**
    * The date and time of travel in local time at the departure airport.
    */
    'departureAt'?: Date | null;
    /**
    * Departure country code in ISO 3166 format.
    */
    'departureCountry'?: string | null;
    /**
    * Departure city name.
    */
    'departureCity'?: string | null;
    /**
    * Departure airport code of leg. 3-letter ISO code according to IATA official directory.
    */
    'departureAirport'?: string | null;
    /**
    * The date and time of travel in local time at the arrival airport.
    */
    'arrivalAt'?: Date | null;
    /**
    * Arrival country code in ISO 3166 format.
    */
    'arrivalCountry'?: string | null;
    /**
    * Arrival city name.
    */
    'arrivalCity'?: string | null;
    /**
    * Arrival airport code of leg. 3-letter ISO code according to IATA official directory.
    */
    'arrivalAirport'?: string | null;
    /**
    * The alphanumeric code for the \"booking class\" of a ticket.
    */
    'fareBasisCode'?: string | null;
    /**
    * Indicates service class (first class, business class, etc.).
    */
    'flightClass'?: string | null;
    /**
    * Indicates whether a stopover is allowed on this ticket.
    */
    'stopOver'?: boolean | null;
    /**
    * The route type of the flight.
    */
    'routeType'?: AirlineLeg.RouteTypeEnum;
    /**
    * Coupon number associated with the leg.
    */
    'couponNumber'?: string | null;
    /**
    * Amount of the ticket, for current leg of the trip, excluding taxes and fees.
    */
    'fareAmount'?: number | null;
    /**
    * Fee amount for current leg of the trip.
    */
    'feeAmount'?: number | null;
    /**
    * Amount of the taxes for current leg of the trip.
    */
    'taxAmount'?: number | null;
    /**
    * Departure tax amount charged by a country when a person is leaving the country.
    */
    'departureTaxAmount'?: number | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "carrierCode",
            "baseName": "carrier_code",
            "type": "string"
        },
        {
            "name": "flightNumber",
            "baseName": "flight_number",
            "type": "string"
        },
        {
            "name": "departureAt",
            "baseName": "departure_at",
            "type": "Date"
        },
        {
            "name": "departureCountry",
            "baseName": "departure_country",
            "type": "string"
        },
        {
            "name": "departureCity",
            "baseName": "departure_city",
            "type": "string"
        },
        {
            "name": "departureAirport",
            "baseName": "departure_airport",
            "type": "string"
        },
        {
            "name": "arrivalAt",
            "baseName": "arrival_at",
            "type": "Date"
        },
        {
            "name": "arrivalCountry",
            "baseName": "arrival_country",
            "type": "string"
        },
        {
            "name": "arrivalCity",
            "baseName": "arrival_city",
            "type": "string"
        },
        {
            "name": "arrivalAirport",
            "baseName": "arrival_airport",
            "type": "string"
        },
        {
            "name": "fareBasisCode",
            "baseName": "fare_basis_code",
            "type": "string"
        },
        {
            "name": "flightClass",
            "baseName": "flight_class",
            "type": "string"
        },
        {
            "name": "stopOver",
            "baseName": "stop_over",
            "type": "boolean"
        },
        {
            "name": "routeType",
            "baseName": "route_type",
            "type": "AirlineLeg.RouteTypeEnum"
        },
        {
            "name": "couponNumber",
            "baseName": "coupon_number",
            "type": "string"
        },
        {
            "name": "fareAmount",
            "baseName": "fare_amount",
            "type": "number"
        },
        {
            "name": "feeAmount",
            "baseName": "fee_amount",
            "type": "number"
        },
        {
            "name": "taxAmount",
            "baseName": "tax_amount",
            "type": "number"
        },
        {
            "name": "departureTaxAmount",
            "baseName": "departure_tax_amount",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return AirlineLeg.attributeTypeMap;
    }
}

export namespace AirlineLeg {
    export enum RouteTypeEnum {
        RoundTrip = <any> 'round_trip',
        OneWay = <any> 'one_way'
    }
}
