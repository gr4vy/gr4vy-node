/**
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { MerchantProfile } from './merchantProfile';
import { PaymentServiceRequestFields } from './paymentServiceRequestFields';

/**
* Request body for updating an active payment service.
*/
export class PaymentServiceUpdate {
    /**
    * A custom name for the payment service. This will be shown in the Admin UI.
    */
    'displayName'?: string;
    /**
    * A list of fields, each containing a key-value pair for each field defined by the definition for this payment service e.g. for stripe-card `secret_key` is required and so must be sent within this field.
    */
    'fields'?: Array<PaymentServiceRequestFields>;
    /**
    * A list of countries that this payment service needs to support in ISO two-letter code format.
    */
    'acceptedCountries'?: Array<string>;
    /**
    * A list of currencies that this payment service needs to support in ISO 4217 three-letter code format.
    */
    'acceptedCurrencies'?: Array<string>;
    /**
    * Defines if 3-D Secure is enabled for the service (can only be enabled if the payment service definition supports the `three_d_secure_hosted` feature). This does not affect pass through 3-D Secure data.
    */
    'threeDSecureEnabled'?: boolean;
    /**
    * Configuration for each supported card scheme. When updating a Payment Service, a key not being present will indicate no updates to be done on that scheme, whereas an object being sent as Null for a key will empty the configuration for that scheme.
    */
    'merchantProfile'?: MerchantProfile | null;
    /**
    * Defines if this service is currently active or not.
    */
    'active'?: boolean;
    /**
    * The numeric rank of a payment service. Payment services with a lower position value are processed first. When a payment services is inserted at a position, any payment services with the the same value or higher are shifted down a position accordingly. When left out, the payment service is inserted at the end of the list.
    */
    'position'?: number;
    /**
    * Defines if the service works as an open-loop service. This feature can only be enabled if the PSP is set up to accept previous scheme transaction IDs.  If this value is set to `null`, it will be set to the value of `open_loop` in the payment service definition.  If `open_loop_toggle` is `false` in the payment service definition, `open_loop` should either not be provided or set to `null`, or it will fail with a validation error.
    */
    'openLoop'?: boolean | null;
    /**
    * Defines if tokenization is enabled for the service. This feature can only be enabled if the payment service is NOT set as `open_loop` and the PSP is set up to tokenize.
    */
    'paymentMethodTokenizationEnabled'?: boolean;
    /**
    * Defines if network tokens are enabled for the service. This feature can only be enabled if the payment service is set as `open_loop` and the PSP is set up to accept network tokens.  If this value is set to `null`, it will be set to the value of `network_tokens_default` in the payment service definition.  If `network_tokens_toggle` is `false` in the payment service definition, `network_tokens_enabled` should either not be provided or set to `null`, or it will fail with a validation error.
    */
    'networkTokensEnabled'?: boolean | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "displayName",
            "baseName": "display_name",
            "type": "string"
        },
        {
            "name": "fields",
            "baseName": "fields",
            "type": "Array<PaymentServiceRequestFields>"
        },
        {
            "name": "acceptedCountries",
            "baseName": "accepted_countries",
            "type": "Array<string>"
        },
        {
            "name": "acceptedCurrencies",
            "baseName": "accepted_currencies",
            "type": "Array<string>"
        },
        {
            "name": "threeDSecureEnabled",
            "baseName": "three_d_secure_enabled",
            "type": "boolean"
        },
        {
            "name": "merchantProfile",
            "baseName": "merchant_profile",
            "type": "MerchantProfile"
        },
        {
            "name": "active",
            "baseName": "active",
            "type": "boolean"
        },
        {
            "name": "position",
            "baseName": "position",
            "type": "number"
        },
        {
            "name": "openLoop",
            "baseName": "open_loop",
            "type": "boolean"
        },
        {
            "name": "paymentMethodTokenizationEnabled",
            "baseName": "payment_method_tokenization_enabled",
            "type": "boolean"
        },
        {
            "name": "networkTokensEnabled",
            "baseName": "network_tokens_enabled",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return PaymentServiceUpdate.attributeTypeMap;
    }
}

