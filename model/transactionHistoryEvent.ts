/**
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* A generic transaction history event.
*/
export class TransactionHistoryEvent {
    /**
    * The type of this resource. Is always `transaction-event`.
    */
    'type'?: TransactionHistoryEvent.TypeEnum;
    /**
    * The unique identifier for this event.
    */
    'id'?: string;
    /**
    * The name of this resource.
    */
    'name'?: TransactionHistoryEvent.NameEnum;
    /**
    * The date and time when this transaction was created in our system.
    */
    'createdAt'?: Date;
    /**
    * A list of key/values with additional data.
    */
    'context'?: { [key: string]: any; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "TransactionHistoryEvent.TypeEnum"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "TransactionHistoryEvent.NameEnum"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date"
        },
        {
            "name": "context",
            "baseName": "context",
            "type": "{ [key: string]: any; }"
        }    ];

    static getAttributeTypeMap() {
        return TransactionHistoryEvent.attributeTypeMap;
    }
}

export namespace TransactionHistoryEvent {
    export enum TypeEnum {
        TransactionEvent = <any> 'transaction-event'
    }
    export enum NameEnum {
        AntiFraudDecisionError = <any> 'anti-fraud-decision-error',
        AntiFraudDecisionSkipped = <any> 'anti-fraud-decision-skipped',
        AntiFraudDecision = <any> 'anti-fraud-decision',
        AntiFraudDecisionUpdate = <any> 'anti-fraud-decision-update',
        AntiFraudDecisionUpdateError = <any> 'anti-fraud-decision-update-error',
        AntiFraudTransactionStatusUpdate = <any> 'anti-fraud-transaction-status-update',
        AntiFraudTransactionStatusUpdateError = <any> 'anti-fraud-transaction-status-update-error',
        AntiFraudWebhook = <any> 'anti-fraud-webhook',
        BinLookupRequest = <any> 'bin-lookup-request',
        DigitalWalletApplePayTokenDecrypted = <any> 'digital-wallet-apple-pay-token-decrypted',
        DigitalWalletGooglePayTokenDecrypted = <any> 'digital-wallet-google-pay-token-decrypted',
        DigitalWalletClickToPayTokenDecrypted = <any> 'digital-wallet-click-to-pay-token-decrypted',
        GiftCardRedemptionFailed = <any> 'gift-card-redemption-failed',
        GiftCardRedemptionSucceeded = <any> 'gift-card-redemption-succeeded',
        GiftCardRefundFailed = <any> 'gift-card-refund-failed',
        GiftCardRefundSucceeded = <any> 'gift-card-refund-succeeded',
        NetworkTokenCryptogramProvisionFailed = <any> 'network-token-cryptogram-provision-failed',
        NetworkTokenCryptogramProvisionSucceeded = <any> 'network-token-cryptogram-provision-succeeded',
        NetworkTokenProvisionFailed = <any> 'network-token-provision-failed',
        NetworkTokenProvisionSucceeded = <any> 'network-token-provision-succeeded',
        PaymentConnectorResponseTransactionAuthorizationFailed = <any> 'payment-connector-response-transaction-authorization-failed',
        PaymentConnectorResponseTransactionAuthorizationSucceeded = <any> 'payment-connector-response-transaction-authorization-succeeded',
        PaymentConnectorResponseTransactionCaptureDeclined = <any> 'payment-connector-response-transaction-capture-declined',
        PaymentConnectorResponseTransactionCaptureFailed = <any> 'payment-connector-response-transaction-capture-failed',
        PaymentConnectorResponseTransactionCaptureSucceeded = <any> 'payment-connector-response-transaction-capture-succeeded',
        PaymentConnectorResponseTransactionDeclined = <any> 'payment-connector-response-transaction-declined',
        PaymentConnectorResponseTransactionVoidDeclined = <any> 'payment-connector-response-transaction-void-declined',
        PaymentConnectorResponseTransactionVoidFailed = <any> 'payment-connector-response-transaction-void-failed',
        PaymentConnectorResponseTransactionVoidSucceeded = <any> 'payment-connector-response-transaction-void-succeeded',
        PaymentConnectorReportTransactionSettled = <any> 'payment-connector-report-transaction-settled',
        PaymentConnectorExternalTransactionRequest = <any> 'payment-connector-external-transaction-request',
        ThreeDSecureAuthenticationRequest = <any> 'three-d-secure-authentication-request',
        ThreeDSecurePreparationRequest = <any> 'three-d-secure-preparation-request',
        ThreeDSecureRequestError = <any> 'three-d-secure-request-error',
        ThreeDSecureResultRequest = <any> 'three-d-secure-result-request',
        ThreeDSecureSuccess = <any> 'three-d-secure-success'
    }
}
