/**
 * Gr4vy API (Beta)
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Buyer } from './buyer';

/**
* A generic payment method.
*/
export class PaymentMethod {
    /**
    * `payment-method`.
    */
    'type'?: PaymentMethod.TypeEnum;
    /**
    * The unique ID of the payment method.
    */
    'id'?: string;
    /**
    * The state of the payment method.  - `processing` - The payment method is still being stored. - `processing_failed` - Storing the payment method did not succeed. - `buyer_approval_pending` - Storing the payment method requires   the buyer to provide approval. Follow the `approval_url` for next steps. - `buyer_approval_declined` - The buyer declined to approve the payment   method. This can happen after the buyer has been redirect to the   `approval_url`. - `buyer_approval_timedout` - The buyer did  not approve the payment   method in time. This can happen after the buyer has been redirect to the   `approval_url`. - `stored` - The payment method is approved and stored with all relevant   payment services. - `partially_stored` - The payment method is approved and stored with only   some of the relevant payment services. - `used` - The payment method was used for a transaction once and   not stored.
    */
    'status'?: PaymentMethod.StatusEnum;
    /**
    * The type of this payment method.
    */
    'method'?: PaymentMethod.MethodEnum;
    /**
    * The date and time when this payment method was first created in our system.
    */
    'createdAt'?: Date;
    /**
    * The date and time when this payment method was last updated in our system.
    */
    'updatedAt'?: Date;
    /**
    * An external identifier that can be used to match the payment method against your own records.
    */
    'externalIdentifier'?: string | null;
    /**
    * The optional buyer for which this payment method has been stored.
    */
    'buyer'?: Buyer | null;
    /**
    * A label for the card or the account. For a `paypal` payment method this is the user\'s email address. For a card it is the last 4 digits of the card.
    */
    'label'?: string | null;
    /**
    * The scheme of the card. Only applies to card payments.
    */
    'scheme'?: string | null;
    /**
    * The expiration date for the payment method.
    */
    'expirationDate'?: string | null;
    /**
    * The optional URL that the buyer needs to be redirected to to further authorize their payment.
    */
    'approvalUrl'?: string | null;
    /**
    * The environment this payment method has been stored for. This will be null of the payment method was not stored.
    */
    'environment'?: PaymentMethod.EnvironmentEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "PaymentMethod.TypeEnum"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "PaymentMethod.StatusEnum"
        },
        {
            "name": "method",
            "baseName": "method",
            "type": "PaymentMethod.MethodEnum"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "Date"
        },
        {
            "name": "externalIdentifier",
            "baseName": "external_identifier",
            "type": "string"
        },
        {
            "name": "buyer",
            "baseName": "buyer",
            "type": "Buyer"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        },
        {
            "name": "scheme",
            "baseName": "scheme",
            "type": "string"
        },
        {
            "name": "expirationDate",
            "baseName": "expiration_date",
            "type": "string"
        },
        {
            "name": "approvalUrl",
            "baseName": "approval_url",
            "type": "string"
        },
        {
            "name": "environment",
            "baseName": "environment",
            "type": "PaymentMethod.EnvironmentEnum"
        }    ];

    static getAttributeTypeMap() {
        return PaymentMethod.attributeTypeMap;
    }
}

export namespace PaymentMethod {
    export enum TypeEnum {
        PaymentMethod = <any> 'payment-method'
    }
    export enum StatusEnum {
        Processing = <any> 'processing',
        ProcessingFailed = <any> 'processing_failed',
        BuyerApprovalPending = <any> 'buyer_approval_pending',
        BuyerApprovalDeclined = <any> 'buyer_approval_declined',
        BuyerApprovalTimedout = <any> 'buyer_approval_timedout',
        Stored = <any> 'stored',
        PartiallyStored = <any> 'partially_stored',
        Used = <any> 'used'
    }
    export enum MethodEnum {
        Card = <any> 'card',
        Paypal = <any> 'paypal',
        Banked = <any> 'banked'
    }
    export enum EnvironmentEnum {
        Development = <any> 'development',
        Staging = <any> 'staging',
        Production = <any> 'production'
    }
}
