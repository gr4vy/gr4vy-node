/**
 * Gr4vy API (Beta)
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* An active, configured payment service.
*/
export class PaymentService {
    /**
    * The ID of this payment service instance.
    */
    'id'?: string;
    /**
    * The type of this resource.
    */
    'type'?: PaymentService.TypeEnum;
    /**
    * The ID of the payment service definition used to create this service. 
    */
    'paymentServiceDefinitionId'?: string;
    /**
    * Defines the ID of the payment method that this service handles.
    */
    'method'?: PaymentService.MethodEnum;
    /**
    * The custom name set for this service.
    */
    'displayName'?: string;
    /**
    * The current status of this service. This will start off as pending, move to created, and might eventually move to an error status if and when the credentials are no longer valid. 
    */
    'status'?: PaymentService.StatusEnum;
    /**
    * A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
    */
    'acceptedCurrencies'?: Array<string>;
    /**
    * A list of countries for which this service is enabled, in ISO two-letter code format.
    */
    'acceptedCountries'?: Array<string>;
    /**
    * Defines if this service should use the test credentials and/or endpoint.
    */
    'useTestEnvironment'?: boolean;
    /**
    * The numeric rank of a payment service. Payment services with a lower position value are processed first.
    */
    'position'?: number;
    /**
    * The date and time when this service was created.
    */
    'createdAt'?: Date;
    /**
    * The date and time when this service was last updated.
    */
    'updatedAt'?: Date;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "PaymentService.TypeEnum"
        },
        {
            "name": "paymentServiceDefinitionId",
            "baseName": "payment_service_definition_id",
            "type": "string"
        },
        {
            "name": "method",
            "baseName": "method",
            "type": "PaymentService.MethodEnum"
        },
        {
            "name": "displayName",
            "baseName": "display_name",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "PaymentService.StatusEnum"
        },
        {
            "name": "acceptedCurrencies",
            "baseName": "accepted_currencies",
            "type": "Array<string>"
        },
        {
            "name": "acceptedCountries",
            "baseName": "accepted_countries",
            "type": "Array<string>"
        },
        {
            "name": "useTestEnvironment",
            "baseName": "use_test_environment",
            "type": "boolean"
        },
        {
            "name": "position",
            "baseName": "position",
            "type": "number"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "Date"
        }    ];

    static getAttributeTypeMap() {
        return PaymentService.attributeTypeMap;
    }
}

export namespace PaymentService {
    export enum TypeEnum {
        PaymentService = <any> 'payment-service'
    }
    export enum MethodEnum {
        Card = <any> 'card',
        Paypal = <any> 'paypal'
    }
    export enum StatusEnum {
        Pending = <any> 'pending',
        Created = <any> 'created',
        Failed = <any> 'failed'
    }
}
