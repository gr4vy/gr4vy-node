/**
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* A cart item that represents a single cart line item for a transaction. Note that some optional properties are required for certain payment service providers. If no value is set for these properties, we will use their default value.  If the total due to be paid for the item is required by the payment service provider, generally referred to as the \"total amount\", the formula below will usually be used to calculate this amount:  `(unit_amount * quantity) - discount_amount + tax_amount`  It\'s highly recommended that the total amount to pay for all items should match the transaction\'s amount to reduce the risk of the transaction being declined by the payment service provider.
*/
export class CartItem {
    /**
    * The name of the cart item. The value you set for this property may be truncated if the maximum length accepted by a payment service provider is less than 255 characters.
    */
    'name': string;
    /**
    * The quantity of this item in the cart. This value cannot be negative or zero.
    */
    'quantity': number;
    /**
    * The amount for an individual item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`. The amount sent through to the payment processor as unitary amount will be calculated to include the discount and tax values sent as part of this cart item.
    */
    'unitAmount': number;
    /**
    * The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.  Please note that this amount is for the total of the cart item and not for an individual item. For example, if the quantity is 5, this value should be the total discount amount for 5 of the cart item.  You might see unexpected failed transactions if the `discount_amount` can not be equally divided by the `quantity` value. This is due to the fact that some payment services require this amount to be specified per unit.  In this situation we recommend splitting this item into separate items, each with their own specific discount.
    */
    'discountAmount'?: number | null = 0;
    /**
    * The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.  Please not that this amount is for the total of the cart item and not for an individual item. For example, if the quantity is 5, this value should be the total tax amount for 5 of the cart item.  You might see unexpected failed transactions if the `tax_amount` can not be equally divided by the `quantity` value. This is due to the fact that some payment services require this amount to be specified per unit.  In this situation we recommend splitting this item into separate items, each with their own specific tax amount.
    */
    'taxAmount'?: number | null = 0;
    /**
    * An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
    */
    'externalIdentifier'?: string | null;
    /**
    * The SKU for the item.
    */
    'sku'?: string | null;
    /**
    * The product URL for the item.
    */
    'productUrl'?: string | null;
    /**
    * The URL for the image of the item.
    */
    'imageUrl'?: string | null;
    /**
    * A list of strings containing product categories for the item. Max length per item: 50.
    */
    'categories'?: Array<string> | null;
    /**
    * The product type of the cart item.
    */
    'productType'?: CartItem.ProductTypeEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        },
        {
            "name": "unitAmount",
            "baseName": "unit_amount",
            "type": "number"
        },
        {
            "name": "discountAmount",
            "baseName": "discount_amount",
            "type": "number"
        },
        {
            "name": "taxAmount",
            "baseName": "tax_amount",
            "type": "number"
        },
        {
            "name": "externalIdentifier",
            "baseName": "external_identifier",
            "type": "string"
        },
        {
            "name": "sku",
            "baseName": "sku",
            "type": "string"
        },
        {
            "name": "productUrl",
            "baseName": "product_url",
            "type": "string"
        },
        {
            "name": "imageUrl",
            "baseName": "image_url",
            "type": "string"
        },
        {
            "name": "categories",
            "baseName": "categories",
            "type": "Array<string>"
        },
        {
            "name": "productType",
            "baseName": "product_type",
            "type": "CartItem.ProductTypeEnum"
        }    ];

    static getAttributeTypeMap() {
        return CartItem.attributeTypeMap;
    }
}

export namespace CartItem {
    export enum ProductTypeEnum {
        Physical = <any> 'physical',
        Discount = <any> 'discount',
        ShippingFee = <any> 'shipping_fee',
        SalesTax = <any> 'sales_tax',
        Digital = <any> 'digital',
        GiftCard = <any> 'gift_card',
        StoreCredit = <any> 'store_credit',
        Surcharge = <any> 'surcharge',
        Null = <any> 'null'
    }
}
