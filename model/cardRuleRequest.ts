/**
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CardRuleCondition } from './cardRuleCondition';

/**
* Creates a new rule for a card transactions.
*/
export class CardRuleRequest {
    /**
    * Whether this rule is currently in use. Rules can be deactivated to allow for them to be kept around and re-activated at a later date.
    */
    'active'?: boolean;
    /**
    * The environment to use this rule in. This rule will only be used for transactions created in that environment.
    */
    'environment'?: CardRuleRequest.EnvironmentEnum;
    /**
    * The numeric rank of a rule. Rules with a lower position value are processed first. When a rule is inserted at a position, any rules with the the same value or higher are down a position accordingly. When left out, the rule is inserted at the end of the list.
    */
    'position'?: number;
    /**
    * One or more conditions that apply for this rule. Each condition needs to match for this rule to go into effect.
    */
    'conditions': Array<CardRuleCondition>;
    /**
    * A list of IDs for the payment services to use, in order of priority. The payment services all need to process cards.
    */
    'paymentServiceIds': Array<string>;
    /**
    * Defines what strategy to use when all of the payment services defined in this rule declined or otherwise were not able to process the card.  * `use_all_providers` - Try all payment services enabled for this currency in order of priority, even if they are not listed in this rule. This is the default behaviour for a rule. * `decline` - Decline the transaction.
    */
    'unprocessableFallbackStrategy'?: CardRuleRequest.UnprocessableFallbackStrategyEnum;
    /**
    * Defines what strategy to use when this rule is not valid. This can happen when the rule has triggered for a certain transaction but none of the listed payment services are eligible to process that transaction currency.  * `use_all_providers` - Try all payment services enabled for this currency in order of priority, even if they are not listed in this rule. This is the default behaviour for a rule. * `skip` - Skip this rule and instead move on to the next highest priority rule. * `decline` - Decline the transaction.
    */
    'invalidRuleFallbackStrategy'?: CardRuleRequest.InvalidRuleFallbackStrategyEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "active",
            "baseName": "active",
            "type": "boolean"
        },
        {
            "name": "environment",
            "baseName": "environment",
            "type": "CardRuleRequest.EnvironmentEnum"
        },
        {
            "name": "position",
            "baseName": "position",
            "type": "number"
        },
        {
            "name": "conditions",
            "baseName": "conditions",
            "type": "Array<CardRuleCondition>"
        },
        {
            "name": "paymentServiceIds",
            "baseName": "payment_service_ids",
            "type": "Array<string>"
        },
        {
            "name": "unprocessableFallbackStrategy",
            "baseName": "unprocessable_fallback_strategy",
            "type": "CardRuleRequest.UnprocessableFallbackStrategyEnum"
        },
        {
            "name": "invalidRuleFallbackStrategy",
            "baseName": "invalid_rule_fallback_strategy",
            "type": "CardRuleRequest.InvalidRuleFallbackStrategyEnum"
        }    ];

    static getAttributeTypeMap() {
        return CardRuleRequest.attributeTypeMap;
    }
}

export namespace CardRuleRequest {
    export enum EnvironmentEnum {
        Development = <any> 'development',
        Staging = <any> 'staging',
        Production = <any> 'production'
    }
    export enum UnprocessableFallbackStrategyEnum {
        UseAllProviders = <any> 'use_all_providers',
        Decline = <any> 'decline'
    }
    export enum InvalidRuleFallbackStrategyEnum {
        UseAllProviders = <any> 'use_all_providers',
        Skip = <any> 'skip',
        Decline = <any> 'decline'
    }
}
