/**
 * Gr4vy API (Beta)
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ErrorDetail } from './errorDetail';

/**
* Incorrect JSON (HTTP 400).
*/
export class Error400IncorrectJson {
    /**
    * `error`.
    */
    'type'?: Error400IncorrectJson.TypeEnum;
    /**
    * `incorrect_json`.
    */
    'code'?: Error400IncorrectJson.CodeEnum;
    /**
    * `400`.
    */
    'status'?: Error400IncorrectJson.StatusEnum;
    /**
    * Incorrect JSON. The request body could not be parsed as valid JSON.
    */
    'message'?: string;
    /**
    * A list of detail objects that further clarify the reason for the error. Not every error supports more detail.
    */
    'details'?: Array<ErrorDetail>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "Error400IncorrectJson.TypeEnum"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "Error400IncorrectJson.CodeEnum"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "Error400IncorrectJson.StatusEnum"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "details",
            "baseName": "details",
            "type": "Array<ErrorDetail>"
        }    ];

    static getAttributeTypeMap() {
        return Error400IncorrectJson.attributeTypeMap;
    }
}

export namespace Error400IncorrectJson {
    export enum TypeEnum {
        Error = <any> 'error'
    }
    export enum CodeEnum {
        IncorrectJson = <any> 'incorrect_json'
    }
    export enum StatusEnum {
        NUMBER_400 = <any> 400
    }
}
