/**
 * Gr4vy API
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * The version of the OpenAPI document: 1.1.0-beta
 * Contact: code@gr4vy.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { TransactionRetriesReportSpecParamsFiltersCreatedAt } from './transactionRetriesReportSpecParamsFiltersCreatedAt';
import { TransactionsReportSpecParamsFiltersAuthorizedAt } from './transactionsReportSpecParamsFiltersAuthorizedAt';
import { TransactionsReportSpecParamsFiltersCapturedAt } from './transactionsReportSpecParamsFiltersCapturedAt';
import { TransactionsReportSpecParamsFiltersUpdatedAt } from './transactionsReportSpecParamsFiltersUpdatedAt';
import { TransactionsReportSpecParamsFiltersVoidedAt } from './transactionsReportSpecParamsFiltersVoidedAt';

/**
* The filters for the report.
*/
export class TransactionsReportSpecParamsFilters {
    /**
    * A list of statuses to filter by.
    */
    'status'?: Array<TransactionsReportSpecParamsFilters.StatusEnum>;
    'createdAt'?: TransactionRetriesReportSpecParamsFiltersCreatedAt;
    'updatedAt'?: TransactionsReportSpecParamsFiltersUpdatedAt;
    'authorizedAt'?: TransactionsReportSpecParamsFiltersAuthorizedAt;
    'capturedAt'?: TransactionsReportSpecParamsFiltersCapturedAt;
    'voidedAt'?: TransactionsReportSpecParamsFiltersVoidedAt;
    /**
    * A list of ISO-4217 currency codes to filter by.
    */
    'currency'?: Array<string>;
    /**
    * A list of payment methods to filter by.
    */
    'method'?: Array<TransactionsReportSpecParamsFilters.MethodEnum>;
    /**
    * A list of card schemes to filter by.
    */
    'scheme'?: Array<TransactionsReportSpecParamsFilters.SchemeEnum>;
    /**
    * A list of metadata as key-value pairs to filter by.
    */
    'metadata'?: Array<object>;
    /**
    * A list of 3DS challenge statuses to filter by.
    */
    'threeDSecureStatus'?: Array<TransactionsReportSpecParamsFilters.ThreeDSecureStatusEnum>;
    /**
    * A list of electric commerce indicators to filter by.
    */
    'threeDSecureEci'?: Array<string>;
    /**
    * A list of 3DS responses to filter by.
    */
    'threeDSecureAuthResp'?: Array<string>;
    /**
    * A list of payment sources to filter by.
    */
    'paymentSource'?: Array<TransactionsReportSpecParamsFilters.PaymentSourceEnum>;
    /**
    * A flag indicating transactions initiated by the merchant to filter by.
    */
    'merchantInitiated'?: boolean;
    /**
    * A flag indicating transactions with subsequent payments to filter by.
    */
    'isSubsequentPayment'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "status",
            "baseName": "status",
            "type": "Array<TransactionsReportSpecParamsFilters.StatusEnum>"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "TransactionRetriesReportSpecParamsFiltersCreatedAt"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "TransactionsReportSpecParamsFiltersUpdatedAt"
        },
        {
            "name": "authorizedAt",
            "baseName": "authorized_at",
            "type": "TransactionsReportSpecParamsFiltersAuthorizedAt"
        },
        {
            "name": "capturedAt",
            "baseName": "captured_at",
            "type": "TransactionsReportSpecParamsFiltersCapturedAt"
        },
        {
            "name": "voidedAt",
            "baseName": "voided_at",
            "type": "TransactionsReportSpecParamsFiltersVoidedAt"
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "Array<string>"
        },
        {
            "name": "method",
            "baseName": "method",
            "type": "Array<TransactionsReportSpecParamsFilters.MethodEnum>"
        },
        {
            "name": "scheme",
            "baseName": "scheme",
            "type": "Array<TransactionsReportSpecParamsFilters.SchemeEnum>"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "Array<object>"
        },
        {
            "name": "threeDSecureStatus",
            "baseName": "three_d_secure_status",
            "type": "Array<TransactionsReportSpecParamsFilters.ThreeDSecureStatusEnum>"
        },
        {
            "name": "threeDSecureEci",
            "baseName": "three_d_secure_eci",
            "type": "Array<string>"
        },
        {
            "name": "threeDSecureAuthResp",
            "baseName": "three_d_secure_auth_resp",
            "type": "Array<string>"
        },
        {
            "name": "paymentSource",
            "baseName": "payment_source",
            "type": "Array<TransactionsReportSpecParamsFilters.PaymentSourceEnum>"
        },
        {
            "name": "merchantInitiated",
            "baseName": "merchant_initiated",
            "type": "boolean"
        },
        {
            "name": "isSubsequentPayment",
            "baseName": "is_subsequent_payment",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return TransactionsReportSpecParamsFilters.attributeTypeMap;
    }
}

export namespace TransactionsReportSpecParamsFilters {
    export enum StatusEnum {
        Processing = <any> 'processing',
        BuyerApprovalPending = <any> 'buyer_approval_pending',
        AuthorizationSucceeded = <any> 'authorization_succeeded',
        AuthorizationFailed = <any> 'authorization_failed',
        AuthorizationDeclined = <any> 'authorization_declined',
        CapturePending = <any> 'capture_pending',
        CaptureSucceeded = <any> 'capture_succeeded',
        AuthorizationVoidPending = <any> 'authorization_void_pending',
        AuthorizationVoided = <any> 'authorization_voided'
    }
    export enum MethodEnum {
        Afterpay = <any> 'afterpay',
        Alipay = <any> 'alipay',
        Alipayhk = <any> 'alipayhk',
        Applepay = <any> 'applepay',
        Bacs = <any> 'bacs',
        Bancontact = <any> 'bancontact',
        Banked = <any> 'banked',
        Becs = <any> 'becs',
        Bitpay = <any> 'bitpay',
        Boleto = <any> 'boleto',
        Boost = <any> 'boost',
        Card = <any> 'card',
        Cashapp = <any> 'cashapp',
        Chaseorbital = <any> 'chaseorbital',
        CheckoutSession = <any> 'checkout-session',
        Clearpay = <any> 'clearpay',
        ClickToPay = <any> 'click-to-pay',
        Dana = <any> 'dana',
        Dcb = <any> 'dcb',
        Dlocal = <any> 'dlocal',
        Ebanx = <any> 'ebanx',
        Efecty = <any> 'efecty',
        Eps = <any> 'eps',
        Everydaypay = <any> 'everydaypay',
        Gcash = <any> 'gcash',
        Gem = <any> 'gem',
        Gemds = <any> 'gemds',
        GiftCard = <any> 'gift-card',
        Giropay = <any> 'giropay',
        Givingblock = <any> 'givingblock',
        Gocardless = <any> 'gocardless',
        Googlepay = <any> 'googlepay',
        GooglepayPanOnly = <any> 'googlepay_pan_only',
        Gopay = <any> 'gopay',
        Grabpay = <any> 'grabpay',
        Id = <any> 'id',
        Ideal = <any> 'ideal',
        Kakaopay = <any> 'kakaopay',
        Kcp = <any> 'kcp',
        Klarna = <any> 'klarna',
        Latitude = <any> 'latitude',
        Latitudeds = <any> 'latitudeds',
        Laybuy = <any> 'laybuy',
        Linepay = <any> 'linepay',
        Linkaja = <any> 'linkaja',
        Maybankqrpay = <any> 'maybankqrpay',
        Mercadopago = <any> 'mercadopago',
        Multibanco = <any> 'multibanco',
        Multipago = <any> 'multipago',
        Netbanking = <any> 'netbanking',
        NetworkToken = <any> 'network-token',
        Oney3x = <any> 'oney_3x',
        Oney4x = <any> 'oney_4x',
        Oney6x = <any> 'oney_6x',
        Oney10x = <any> 'oney_10x',
        Oney12x = <any> 'oney_12x',
        Ovo = <any> 'ovo',
        Oxxo = <any> 'oxxo',
        Payid = <any> 'payid',
        Paymaya = <any> 'paymaya',
        Paypal = <any> 'paypal',
        Paypalpaylater = <any> 'paypalpaylater',
        Payto = <any> 'payto',
        Venmo = <any> 'venmo',
        Pix = <any> 'pix',
        Pse = <any> 'pse',
        Rabbitlinepay = <any> 'rabbitlinepay',
        Razorpay = <any> 'razorpay',
        Scalapay = <any> 'scalapay',
        Sepa = <any> 'sepa',
        Shopeepay = <any> 'shopeepay',
        Singteldash = <any> 'singteldash',
        Smartpay = <any> 'smartpay',
        Sofort = <any> 'sofort',
        Spei = <any> 'spei',
        Stripedd = <any> 'stripedd',
        Thaiqr = <any> 'thaiqr',
        Touchngo = <any> 'touchngo',
        Truemoney = <any> 'truemoney',
        Trustly = <any> 'trustly',
        Trustlyeurope = <any> 'trustlyeurope',
        Upi = <any> 'upi',
        Vipps = <any> 'vipps',
        Waave = <any> 'waave',
        Webpay = <any> 'webpay',
        Wechat = <any> 'wechat',
        Zippay = <any> 'zippay'
    }
    export enum SchemeEnum {
        Accel = <any> 'accel',
        Amex = <any> 'amex',
        Bancontact = <any> 'bancontact',
        CarteBancaire = <any> 'carte-bancaire',
        Cirrus = <any> 'cirrus',
        Culiance = <any> 'culiance',
        Dankort = <any> 'dankort',
        DinersClub = <any> 'diners-club',
        Discover = <any> 'discover',
        EftposAustralia = <any> 'eftpos-australia',
        Elo = <any> 'elo',
        Hipercard = <any> 'hipercard',
        Jcb = <any> 'jcb',
        Maestro = <any> 'maestro',
        Mastercard = <any> 'mastercard',
        Mir = <any> 'mir',
        Nyce = <any> 'nyce',
        Other = <any> 'other',
        Pulse = <any> 'pulse',
        Rupay = <any> 'rupay',
        Star = <any> 'star',
        Uatp = <any> 'uatp',
        Unionpay = <any> 'unionpay',
        Visa = <any> 'visa',
        Null = <any> 'null'
    }
    export enum ThreeDSecureStatusEnum {
        SetupError = <any> 'setup_error',
        Error = <any> 'error',
        Declined = <any> 'declined',
        Cancelled = <any> 'cancelled',
        Complete = <any> 'complete'
    }
    export enum PaymentSourceEnum {
        Ecommerce = <any> 'ecommerce',
        Moto = <any> 'moto',
        Recurring = <any> 'recurring',
        Installment = <any> 'installment',
        CardOnFile = <any> 'card_on_file'
    }
}
